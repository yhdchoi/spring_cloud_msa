version: "1.0.0"

services:

  ### DISCOVERY EUREKA SERVER
  eureka-server:
    image: eureka-server:1.0.0
    container_name: eureka-server
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://eureka-server:8761/health || exit 1" ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - cloud-network
    restart: on-failure


  ### CONFIG SERVER
  config-server:
    image: yhdc/config-server:1.0.0
    container_name: config-server
    ports:
      - "8888:8888"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://api-gateway-service:8888/actuator/health || exit 1" ]
      interval: 10s
      timeout: 3s
      retries: 3
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - cloud-network
    restart: on-failure


  ### API GATEWAY
  api-gateway:
    image: yhdc/api-gateway:1.0.0
    ports:
      - "8080:8080"
    environment:
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka
      - CONFIG_SERVER_URL=http://config-server:8761/health
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - cloud-network
    restart: on-failure

  ### KEYCLOAK
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.2.0
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MARIADB
      DB_ADDR: mariadb
      DB_DATABASE: keycloak
      DB_USER: root
      DB_PASSWORD: fiorano1q2w
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8181:8080"
    volumes:
      - ./volumes/keycloak/realms/:/opt/keycloak/data/import
    depends_on:
      - api-gateway
      - mariadb-keycloak
    networks:
      - cloud-network
    restart: on-failure

  ### KEYCLOAK DB
  mariadb-keycloak:
    image: mariadb:latest
    container_name: keycloak-db
    ports:
      - "3399:3306"
    environment:
      MARIADB_DATABASE: keycloak
      MARIADB_ROOT_PASSWORD: fiorano1q2w
      MARIADB_USER: fiorano
      MARIADB_PASSWORD: fiorano
    volumes:
      - ./volumes/keycloak-db/conf.d:/etc/mysql/conf.d
      - ./volumes/keycloak-db/data:/var/lib/mysql
    networks:
      - cloud-network
    restart: on-failure



  ### ACCOUNT SERVICE
  account-service:
    container_name: account-service
    image: yhdc/account-service:1.0.0
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - config-server
      - api-gateway
      - mariadb-account
    networks:
      - cloud-network
    restart: on-failure

  ### ACCOUNT DB
  mariadb-account:
    image: mariadb:latest
    container_name: account-db
    ports:
      - "3307:3306"
    environment:
      MARIADB_DATABASE: account_db
      MARIADB_ROOT_PASSWORD: fiorano1q2w
      MARIADB_USER: fiorano
      MARIADB_PASSWORD: fiorano
    volumes:
      - ./volumes/account-db/conf.d:/etc/mysql/conf.d
      - ./volumes/account-db/data:/var/lib/mysql
    networks:
      - cloud-network
    restart: on-failure



  ### STORE DB
  mongodb-store:
    image: mongo:latest
    container_name: store-db
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_DATABASE: store_db
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: fiorano1q2w
    volumes:
      - ./volumes/store-db:/data/db
    networks:
      - cloud-network
    restart: on-failure

  ### PRODUCT DB
  mongodb-product:
    image: mongo:latest
    container_name: product-db
    ports:
      - "27019:27017"
    environment:
      MONGO_INITDB_DATABASE: product_db
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: fiorano1q2w
    volumes:
      - ./volumes/product-db:/data/db

  ### ORDER DB
  mongodb-order:
    image: mongo:latest
    container_name: order-db
    ports:
      - "27020:27017"
    environment:
      MONGO_INITDB_DATABASE: order_db
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: fiorano1q2w
    volumes:
      - ./volumes/order-db:/data/db

  ### FILE DB
  postgres-file:
    image: postgres:15
    container_name: file-db
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: file_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: fiorano1q2we
    volumes:
      - ./volumes/file-db:/var/lib/postgresql/data

  ### KAFKA ORCHESTRATION
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  ### KAFKA
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8200:8080"
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTER_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'

  ### SCHEMA
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8201:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081



## NETWORK
networks:
  cloud-network:



  #  mariadb-file:
  #    image: mariadb:latest
  #    container_name: file-db
  #    ports:
  #      - "3308:3306"
  #    environment:
  #      MARIADB_DATABASE: file_db
  #      MARIADB_ROOT_PASSWORD: fiorano1q2w
  #      MARIADB_USER: fiorano
  #      MARIADB_PASSWORD: fiorano
  #    command:
  #      - --character-set-server=utf8mb4
  #      - --collation-server=utf8mb4_unicode_ci
  #    volumes:
  #      - ./volumes/file-db/conf.d:/etc/mysql/conf.d
  #      - ./volumes/file-db/data:/var/lib/mysql
  #    restart: on-failure


  ### AI VECTOR DB
  #  pgvector:
  #    image: pgvector/pgvector:pg16
  #    ports:
  #      - '5440:5432'
  #    environment:
  #      POSTGRES_DB: ai_vector
  #      POSTGRES_USER: fiorano
  #      POSTGRES_PASSWORD: fiorano1q2w
  #    labels:
  #      - "org.springframework.boot.service-connection=postgres"


  ### LOG DB
#  es:
#    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VER}
#    container_name: es
#    environment:
#      - node.name=es-node
#      - cluster.name=search-cluster
#      - discovery.type=single-node
#      - xpack.security.enabled=false
#      - xpack.security.http.ssl.enabled=false
#      - xpack.security.transport.ssl.enabled=false
#    ports:
#      - "9200:9200" # https
#      - "9300:9300" #tcp
#    networks:
#      - es-bridge
#
#  kibana:
#    image: docker.elastic.co/kibana/kibana:${ELASTIC_VER}
#    container_name: kibana
#    environment:
#      SERVER_NAME: kibana
#      ELASTICSEARCH_HOSTS: http://es:9200
#    ports:
#      - "5601:5601"
#    # Elasticsearch Start Dependency
#    depends_on:
#      - es
#    networks:
#      - es-bridge
#
#networks:
#  es-bridge:
#    driver: bridge
