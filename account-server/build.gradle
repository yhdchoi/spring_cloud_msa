plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.yhdc'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.1")
}

dependencies {
    // WEB
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // CONFIG
    implementation 'org.springframework.cloud:spring-cloud-starter-config'

    // SECURITY
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // DATA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // QueryDSL
//    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
//    annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
//    annotationProcessor 'jakarta.annotation:jakarta.annotation-api:3.0.0'
//    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.2.0'

    // MONITOR
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // TOOL
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    // TEST
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

/**
 * QueryDSL Build Options
 */
//def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile
//
//sourceSets {
//    main.java.srcDirs += [querydslDir]
//}
//
//tasks.withType(JavaCompile).configureEach {
////    options.generatedSourceOutputDirectory = file(querydslDir)
//    options.generatedSourceOutputDirectory.set(file(querydslDir))
//}
//
//tasks.named("clean") {
//    doLast {
//        file(querydslDir).deleteDir()
//    }
//}